{"version":3,"sources":["actionTypePrefixes.ts","constants/index.ts","reducers/regions.ts","reducers/countries.ts","reducers/country.ts","config/combineReducers.ts","config/api.ts","sagas/index.ts","config/combineSagas.ts","config/combineMiddlewares.ts","common/components/Header/Header.tsx","common/components/SimpleList/SimpleList.tsx","selectors/index.ts","home/components/Regions/Regions.tsx","actions/index.ts","home/components/Countries/CountryListHead.tsx","home/components/Countries/CountryListToolbar.tsx","utils/helpers.ts","home/components/Countries/CountryList.tsx","home/components/Countries/Countries.tsx","common/components/GoogleMap/GoogleMap.tsx","home/components/Country/Country.tsx","home/index.tsx","App.tsx","config/configureStore.ts","serviceWorker.ts","index.tsx","home/components/Country/Country.module.scss","common/components/GoogleMap/GoogleMap.module.scss"],"names":["GET_REGIONS_TRIGGER","PREFIXES","GET_REGIONS_REQUEST","GET_REGIONS_SUCCESS","GET_REGIONS_FAILURE","GET_REGIONS_FULFILL","RESET_REGIONS","GET_COUNTRIES_BY_REGION_TRIGGER","GET_COUNTRIES_BY_REGION_REQUEST","GET_COUNTRIES_BY_REGION_SUCCESS","GET_COUNTRIES_BY_REGION_FAILURE","GET_COUNTRIES_BY_REGION_FULFILL","RESET_COUNTRIES_BY_REGION","GET_COUNTRY_BY_NAME_TRIGGER","GET_COUNTRY_BY_NAME_REQUEST","GET_COUNTRY_BY_NAME_SUCCESS","GET_COUNTRY_BY_NAME_FAILURE","GET_COUNTRY_BY_NAME_FULFILL","RESET_COUNTRY_BY_NAME","INITIAL_STATE","error","isLoading","data","country","combineReducers","regions","state","action","type","types","payload","countries","api","region","name","getRegionsSaga","watchGettingRegionsSaga","getCountriesByRegionSaga","watchGettingCountriesByRegionSaga","getCountryByNameSaga","watchGettingCountryByNameSaga","put","call","axios","get","params","fields","paramsSerializer","qs","stringify","arrayFormat","delimiter","response","regionsDuplicateFree","uniqWith","one","another","map","takeLatest","rootSaga","all","homeSagaWatchers","sagaMiddleware","createSagaMiddleware","middlewares","Header","AppBar","position","Toolbar","Typography","variant","SimpleList","values","Container","List","component","value","idx","ListItem","key","button","Link","to","pathname","ListItemIcon","ListItemText","primary","regionsSelector","countriesSelector","countrySelector","Regions","useSelector","dispatch","useDispatch","useEffect","Grid","className","item","xs","CircularProgress","headCells","id","align","label","isSortable","CountryListHead","props","order","orderBy","onSort","TableHead","TableRow","headCell","TableCell","sortDirection","TableSortLabel","active","direction","onClick","event","property","handleSortClick","IconComponent","ArrowDropDownIcon","CountryListToolbar","history","useHistory","Button","color","goBack","descendingComparator","a","b","CountryList","React","useState","setOrder","setOrderBy","Paper","length","Box","Table","stickyHeader","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","row","hover","tabIndex","push","capital","population","style","marginBottom","Countries","useLocation","Map","latitude","longitude","useLoadScript","googleMapsApiKey","isLoaded","loadError","mapContainerClassName","classes","center","lat","lng","zoom","Country","gutterBottom","Card","CardHeader","title","CardMedia","image","flag","subregion","callingCodes","join","timezones","tz","languages","language","currencies","currency","symbol","Divider","GoogleMap","latlng","Home","container","spacing","justify","exact","path","darkTheme","createMuiTheme","palette","lightBlue","store","initialState","createStore","rootReducer","composeWithDevTools","applyMiddleware","configureStore","run","App","basename","ThemeProvider","theme","StylesProvider","injectFirst","CssBaseline","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.5a7816bb.chunk.js","sourcesContent":["export default {\n  TRIGGER: 'TRIGGER',\n  REQUEST: 'REQUEST',\n  SUCCESS: 'SUCCESS',\n  FAILURE: 'FAILURE',\n  FULFILL: 'FULFILL'\n}\n","import PREFIXES from '../actionTypePrefixes'\n\n\nconst NAMESPACE = 'REGIONS'\n\nexport const GET_REGIONS_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_REGIONS`\nexport const GET_REGIONS_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_REGIONS`\nexport const GET_REGIONS_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_REGIONS`\nexport const GET_REGIONS_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_REGIONS`\nexport const GET_REGIONS_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_REGIONS`\n\nexport const RESET_REGIONS = `${NAMESPACE}:RESET_REGIONS`\n\nexport const GET_COUNTRIES_BY_REGION_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_COUNTRIES_BY_REGION`\nexport const GET_COUNTRIES_BY_REGION_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_COUNTRIES_BY_REGION`\nexport const GET_COUNTRIES_BY_REGION_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_COUNTRIES_BY_REGION`\nexport const GET_COUNTRIES_BY_REGION_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_COUNTRIES_BY_REGION`\nexport const GET_COUNTRIES_BY_REGION_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_COUNTRIES_BY_REGION`\n\nexport const RESET_COUNTRIES_BY_REGION = `${NAMESPACE}:RESET_COUNTRIES_BY_REGION`\n\nexport const GET_COUNTRY_BY_NAME_TRIGGER = `${PREFIXES.TRIGGER}/${NAMESPACE}:GET_COUNTRY_BY_NAME`\nexport const GET_COUNTRY_BY_NAME_REQUEST = `${PREFIXES.REQUEST}/${NAMESPACE}:GET_COUNTRY_BY_NAME`\nexport const GET_COUNTRY_BY_NAME_SUCCESS = `${PREFIXES.SUCCESS}/${NAMESPACE}:GET_COUNTRY_BY_NAME`\nexport const GET_COUNTRY_BY_NAME_FAILURE = `${PREFIXES.FAILURE}/${NAMESPACE}:GET_COUNTRY_BY_NAME`\nexport const GET_COUNTRY_BY_NAME_FULFILL = `${PREFIXES.FULFILL}/${NAMESPACE}:GET_COUNTRY_BY_NAME`\n\nexport const RESET_COUNTRY_BY_NAME = `${NAMESPACE}:RESET_COUNTRY_BY_NAME`\n","import * as types from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nexport const INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const regionsReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case types.GET_REGIONS_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case types.GET_REGIONS_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case types.GET_REGIONS_FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      }\n    case types.GET_REGIONS_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case types.RESET_REGIONS:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as types from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  data: any\n}\n\nexport const INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  data: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const countriesReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case types.GET_COUNTRIES_BY_REGION_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case types.GET_COUNTRIES_BY_REGION_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        error: null\n      }\n    case types.GET_COUNTRIES_BY_REGION_FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      }\n    case types.GET_COUNTRIES_BY_REGION_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case types.RESET_COUNTRIES_BY_REGION:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import * as types from '../constants'\n\n\ntype StateType = {\n  error: null | string\n  isLoading: boolean\n  country: any\n}\n\nexport const INITIAL_STATE = {\n  error: null,\n  isLoading: true,\n  country: null\n}\n\ntype ActionType = {\n  type: string\n  payload: any\n}\n\nexport const countryReducer = ( state: StateType = INITIAL_STATE, action: ActionType ): StateType => {\n  switch ( action.type ) {\n    case types.GET_COUNTRY_BY_NAME_REQUEST:\n      return {\n        ...state,\n        isLoading: true\n      }\n    case types.GET_COUNTRY_BY_NAME_SUCCESS:\n      return {\n        ...state,\n        country: action.payload,\n        error: null\n      }\n    case types.GET_COUNTRY_BY_NAME_FAILURE:\n      return {\n        ...state,\n        error: action.payload\n      }\n    case types.GET_COUNTRY_BY_NAME_FULFILL:\n      return {\n        ...state,\n        isLoading: false\n      }\n    case types.RESET_COUNTRY_BY_NAME:\n      return {\n        ...INITIAL_STATE\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { regionsReducer } from '../reducers/regions'\nimport { countriesReducer } from '../reducers/countries'\nimport { countryReducer } from '../reducers/country'\n\n\nexport default combineReducers( {\n  regions: regionsReducer,\n  countries: countriesReducer,\n  country: countryReducer\n} )\n","const REST_COUNTRIES_API_URL = 'https://restcountries.eu/rest/v2'\n\nexport const api = {\n  getAll: () => `${REST_COUNTRIES_API_URL}/all`,\n  getCountriesByRegion: ( region: string ) => `${REST_COUNTRIES_API_URL}/region/${region}`,\n  getCountryByName: ( name: string ) => `${REST_COUNTRIES_API_URL}/name/${name}`\n}\n","import {\n  put,\n  call,\n  takeLatest\n} from 'redux-saga/effects'\nimport axios from 'axios'\nimport qs from 'qs'\n\nimport { api } from '../config/api'\n\nimport * as types from '../constants'\n\nimport uniqWith from 'lodash/uniqWith'\n\n\nexport function* getRegionsSaga(): any {\n  try {\n    yield put( { type: types.GET_REGIONS_REQUEST } )\n\n    const response = yield call( axios.get, api.getAll(), {\n      params: {\n        fields: ['region']\n      },\n      paramsSerializer: ( params ) => qs.stringify( params, {\n        arrayFormat: 'comma',\n        delimiter: ';'\n      } )\n    } )\n\n    const regionsDuplicateFree = uniqWith(\n      response.data, ( one: { region: string }, another: { region: string } ) => ( !one.region || one.region === another.region )\n    ).map( ( region: { region: string } ) => region.region )\n\n    yield put( {\n      type: types.GET_REGIONS_SUCCESS,\n      payload: regionsDuplicateFree\n    } )\n  } catch ( error ) {\n    yield put( { type: types.GET_REGIONS_FAILURE, payload: error.response.data } )\n  } finally {\n    yield put( { type: types.GET_REGIONS_FULFILL } )\n  }\n}\n\nfunction* watchGettingRegionsSaga() {\n  yield takeLatest( types.GET_REGIONS_TRIGGER, getRegionsSaga )\n}\n\ninterface IGetCountriesByRegionSagaAction {\n  type: string\n  payload: {\n    region: string\n  }\n}\n\nexport function* getCountriesByRegionSaga( { payload }: IGetCountriesByRegionSagaAction ): any {\n  try {\n    yield put( { type: types.GET_COUNTRIES_BY_REGION_REQUEST } )\n\n    const response = yield call( axios.get, api.getCountriesByRegion( payload.region ) )\n\n    yield put( {\n      type: types.GET_COUNTRIES_BY_REGION_SUCCESS,\n      payload: response.data\n    } )\n  } catch ( error ) {\n    yield put( { type: types.GET_COUNTRIES_BY_REGION_FAILURE, payload: error.response.data } )\n  } finally {\n    yield put( { type: types.GET_COUNTRIES_BY_REGION_FULFILL } )\n  }\n}\n\nfunction* watchGettingCountriesByRegionSaga() {\n  yield takeLatest( types.GET_COUNTRIES_BY_REGION_TRIGGER, getCountriesByRegionSaga )\n}\n\ninterface IGetCountryByNameSagaAction {\n  type: string\n  payload: {\n    name: string\n  }\n}\n\nexport function* getCountryByNameSaga( { payload }: IGetCountryByNameSagaAction ): any {\n  try {\n    yield put( { type: types.GET_COUNTRY_BY_NAME_REQUEST } )\n\n    const response = yield call( axios.get, api.getCountryByName( payload.name ) )\n\n    yield put( {\n      type: types.GET_COUNTRY_BY_NAME_SUCCESS,\n      payload: response.data[0]\n    } )\n  } catch ( error ) {\n    yield put( { type: types.GET_COUNTRY_BY_NAME_FAILURE, payload: error.response.data } )\n  } finally {\n    yield put( { type: types.GET_COUNTRY_BY_NAME_FULFILL } )\n  }\n}\n\nfunction* watchGettingCountryByNameSaga() {\n  yield takeLatest( types.GET_COUNTRY_BY_NAME_TRIGGER, getCountryByNameSaga )\n}\n\nexport default [\n  watchGettingRegionsSaga(),\n  watchGettingCountriesByRegionSaga(),\n  watchGettingCountryByNameSaga()\n]\n","import { all } from 'redux-saga/effects'\n\nimport homeSagaWatchers from '../sagas'\n\n\nexport default function* rootSaga() {\n  yield all( [\n    ...homeSagaWatchers\n  ] )\n}\n","import createSagaMiddleware from 'redux-saga'\n\nimport rootSaga from './combineSagas'\n\n\nconst sagaMiddleware = createSagaMiddleware()\nlet middlewares = [ sagaMiddleware ]\n\nexport const runSaga = () => sagaMiddleware.run( rootSaga )\n\nexport default middlewares\n","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\n\n\nconst Header: React.FC = () => {\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h5\">\n          Regions info\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport {\n  Link\n} from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport PublicRoundedIcon from '@material-ui/icons/PublicRounded'\n\n\ninterface ISimpleList {\n  values: string[]\n}\n\nconst SimpleList: React.FC<ISimpleList> = ( {\n  values\n} ) => {\n  return (\n    <Container>\n      <List component=\"nav\">\n        {\n          values.map( ( value, idx ) => (\n            <ListItem\n              key={ `region_${idx}` }\n              button\n              component={ Link }\n              to={ {\n                pathname: '/region',\n                state: { region: value }\n              } }\n            >\n              <ListItemIcon>\n                <PublicRoundedIcon />\n              </ListItemIcon>\n              <ListItemText primary={ value } />\n            </ListItem>\n          ) )\n        }\n      </List>\n    </Container>\n  )\n}\n\nexport default SimpleList\n","export const regionsSelector = ( { regions }: any ): any => regions\nexport const countriesSelector = ( { countries }: any ): any => countries\nexport const countrySelector = ( { country }: any ): any => country\n","import React, {\n  useEffect\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport SimpleList from '../../../common/components/SimpleList'\n\nimport {\n  regionsSelector\n} from '../../../selectors'\n\nimport {\n  getRegions\n} from '../../../actions'\n\n\nconst Regions: React.FC = () => {\n  const {\n    // error,\n    isLoading,\n    data: regions\n  } = useSelector( regionsSelector )\n  const dispatch = useDispatch()\n\n  useEffect( () => {\n    dispatch( getRegions() )\n  }, [] )\n\n  return (\n    <Grid className=\"hrz-center\" item xs={ 6 }>\n      {\n        !isLoading ? (\n          <SimpleList\n            values={ regions }\n          />\n        ) : <CircularProgress />\n      }\n    </Grid>\n  )\n}\n\nexport default Regions\n","import * as types from '../constants'\n\n\nexport const getRegions = () => ( { type: types.GET_REGIONS_TRIGGER } )\n\nexport const resetRegions = () => ( { type: types.RESET_REGIONS } )\n\ninterface IGetCountriesByRegionPayload {\n  region: string\n}\n\nexport const getCountriesByRegion = ( payload: IGetCountriesByRegionPayload ) => ( {\n  type: types.GET_COUNTRIES_BY_REGION_TRIGGER,\n  payload\n} )\n\nexport const resetCountriesByRegion = () => ( { type: types.RESET_COUNTRIES_BY_REGION } )\n\ninterface IGetCountryByNamePayload {\n  name: string\n}\n\nexport const getCountryByName = ( payload: IGetCountryByNamePayload ) => ( {\n  type: types.GET_COUNTRY_BY_NAME_TRIGGER,\n  payload\n} )\n\nexport const resetCountryByName = () => ( { type: types.RESET_COUNTRY_BY_NAME } )\n","import React from 'react'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\n\n\ntype OrderByType = {\n  name: string\n  population: number\n  capital: string\n  region: string\n}\n\ntype OrderType = 'asc' | 'desc'\n\ntype HeadCellType = {\n  id: keyof OrderByType\n  label: string\n  align: 'center' | 'left' | 'right'\n  isSortable: boolean\n}\n\nconst headCells: HeadCellType[] = [\n  { id: 'name', align: 'left', label: 'Name', isSortable: true },\n  { id: 'region', align: 'left', label: 'Region', isSortable: false },\n  { id: 'capital', align: 'left', label: 'Capital', isSortable: false },\n  { id: 'population', align: 'left', label: 'Population', isSortable: true }\n]\n\ninterface ICountryListHeadProps {\n  onSort: ( event: React.MouseEvent<unknown>, property: keyof OrderByType ) => void\n  order: OrderType\n  orderBy: string\n}\n\nconst CountryListHead: React.FC<ICountryListHeadProps> = ( props: ICountryListHeadProps ) => {\n  const {\n    order,\n    orderBy,\n    onSort\n  } = props\n\n  const handleSortClick = ( event: React.MouseEvent<unknown>, property: keyof OrderByType ) => {\n    onSort( event, property )\n  }\n\n  return (\n    <TableHead>\n      <TableRow>\n        {\n          headCells.map( ( headCell: HeadCellType ) => (\n            <TableCell\n              key={ headCell.id }\n              align={ headCell.align }\n              sortDirection={ orderBy === headCell.id ? order : false }\n            >\n              {\n                headCell.isSortable ? (\n                  <TableSortLabel\n                    active={ orderBy === headCell.id }\n                    direction={ order }\n                    onClick={ ( event: React.MouseEvent<unknown> ) => handleSortClick( event, headCell.id ) }\n                    IconComponent={ ArrowDropDownIcon }\n                  >\n                    { headCell.label }\n                  </TableSortLabel>\n                ) : headCell.label\n              }\n            </TableCell>\n          ) )\n        }\n      </TableRow>\n    </TableHead>\n  )\n}\n\nexport default CountryListHead\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\n\nconst CountryListToolbar: React.FC = () => {\n  const history = useHistory()\n\n  return (\n    <Toolbar className=\"toolbar\">\n      <Typography variant=\"h4\" id=\"tableTitle\">\n        Region's countries\n      </Typography>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        onClick={ () => history.goBack() }\n      >\n        Back\n      </Button>\n    </Toolbar>\n  )\n}\n\nexport default CountryListToolbar\n","export type OrderType = 'asc' | 'desc'\n\nconst descendingComparator = <T, >( a: T, b: T, orderBy: keyof T ) => {\n  if ( b[orderBy] < a[orderBy] ) {\n    return -1\n  }\n  if ( b[orderBy] > a[orderBy] ) {\n    return 1\n  }\n  return 0\n}\n\nexport const getComparator = <Key extends keyof any>(\n  order: OrderType,\n  orderBy: Key\n): ( a: { [key in Key]: number | string }, b: { [key in Key]: number | string } ) => number => {\n  return order === 'desc'\n    ? ( a, b ) => descendingComparator( a, b, orderBy )\n    : ( a, b ) => -descendingComparator( a, b, orderBy )\n}\n\nexport const stableSort = <T, >( array: T[], comparator: ( a: T, b: T ) => number ) => {\n  const stabilizedThis = array.map( ( el, index ) => [el, index] as [T, number] )\n\n  stabilizedThis.sort( ( a, b ) => {\n    const order = comparator( a[0], b[0] )\n    if ( order !== 0 ) return order\n    return a[1] - b[1]\n  } )\n\n  return stabilizedThis.map( ( el ) => el[0] )\n}\n","import React from 'react'\nimport {\n  useHistory\n} from 'react-router-dom'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\n\nimport CountryListHead from './CountryListHead'\nimport CountryListToolbar from './CountryListToolbar'\n\nimport {\n  stableSort,\n  getComparator,\n  OrderType\n} from '../../../utils/helpers'\n\n\ninterface ICountryListProps {\n  countries: any[]\n}\n\ntype OrderByType = {\n  name: string\n  population: number\n  capital: string\n  region: string\n}\n\nconst CountryList: React.FC<ICountryListProps> = ( {\n  countries\n} ) => {\n  const [order, setOrder] = React.useState<OrderType>( 'desc' )\n  const [orderBy, setOrderBy] = React.useState<keyof OrderByType>( 'name' )\n  const history = useHistory()\n\n  const handleSort = ( event: React.MouseEvent<unknown>, property: keyof OrderByType ) => {\n    const isAsc = orderBy === property && order === 'asc'\n    const newOrder = isAsc ? 'desc' : 'asc'\n    setOrder( newOrder )\n    setOrderBy( property )\n  }\n\n  const handleRowClick = ( name: string ) => {\n    history.push( '/country', { name } )\n  }\n\n  return (\n    <Grid>\n      <Paper className=\"paper\">\n        <CountryListToolbar />\n        {\n          countries.length ? (\n            <Box className=\"table-box\">\n              <Table stickyHeader>\n                <CountryListHead\n                  order={ order }\n                  orderBy={ orderBy }\n                  onSort={ handleSort }\n                />\n                <TableBody>\n                  {\n                    stableSort( countries, getComparator( order, orderBy ) )\n                      .map( ( row: any ) => {\n                        return (\n                          <TableRow\n                            hover\n                            tabIndex={ -1 }\n                            key={ row.name }\n                            onClick={ () => handleRowClick( row.name ) }\n                          >\n                            <TableCell align=\"left\">\n                              <Typography>{ row.name } </Typography>\n                            </TableCell>\n                            <TableCell align=\"left\">\n                              <Typography>{ row.region }</Typography>\n                            </TableCell>\n                            <TableCell align=\"left\">\n                              <Typography>{ row.capital }</Typography>\n                            </TableCell>\n                            <TableCell align=\"left\">\n                              <Typography>{ row.population }</Typography>\n                            </TableCell>\n                          </TableRow>\n                        )\n                      } )\n                  }\n                </TableBody>\n              </Table>\n            </Box>\n          ) : (\n            <Typography variant=\"h5\" align=\"center\" style={ { marginBottom: 30 } }>There is no data</Typography>\n          )\n        }\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={ () => history.goBack() }\n        >\n          Back\n        </Button>\n      </Paper>\n    </Grid>\n  )\n}\n\nexport default CountryList\n\n","import React, {\n  useEffect\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\nimport {\n  useLocation,\n  Redirect\n} from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport CountryList from './CountryList'\n\nimport {\n  countriesSelector\n} from '../../../selectors'\n\nimport {\n  getCountriesByRegion,\n  resetCountriesByRegion\n} from '../../../actions'\n\n\nconst Countries: React.FC = () => {\n  const { state } = useLocation<any>()\n  const {\n    // error,\n    isLoading,\n    data: countries\n  } = useSelector( countriesSelector )\n  const dispatch = useDispatch()\n\n  useEffect( () => {\n    if ( state && state.region ) {\n      dispatch( getCountriesByRegion( { region: state.region } ) )\n    }\n\n    return () => {\n      dispatch( resetCountriesByRegion() )\n    }\n  }, [] )\n\n  if ( !state ) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <Grid className=\"hrz-center\" item>\n      {\n        !isLoading ? (\n          <CountryList\n            countries={ countries }\n          />\n        ) : <CircularProgress />\n      }\n    </Grid>\n  )\n}\n\nexport default Countries\n","import React from 'react'\nimport {\n  GoogleMap,\n  Marker,\n  useLoadScript\n} from '@react-google-maps/api'\nimport Box from '@material-ui/core/Box'\nimport Typography from '@material-ui/core/Typography'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport classes from './GoogleMap.module.scss'\n\n\ninterface IMapProps {\n  latitude: number\n  longitude: number\n}\n\nconst Map: React.FC<IMapProps> = ( {\n  latitude,\n  longitude\n} ) => {\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript( {\n    // Sensitive data, should be used on backend or as environment variable\n    googleMapsApiKey: 'AIzaSyCEkw4NOJRaKZT_kFcg0LezAmjD_NprPMc'\n  } )\n\n  if ( !latitude || !longitude ) {\n    return (\n      <Typography component=\"h6\" variant=\"h6\">\n        There are no coordinates\n      </Typography>\n    )\n  }\n\n  if ( loadError ) {\n    return <Box>Map cannot be loaded right now, sorry.</Box>\n  }\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerClassName={ classes['map'] }\n      center={ {\n        lat: latitude,\n        lng: longitude\n      } }\n      zoom={ 3 }\n    >\n      <Marker\n        position={ {\n          lat: latitude,\n          lng: longitude\n        } }\n      />\n    </GoogleMap>\n  ) : (\n    <CircularProgress />\n  )\n}\n\nexport default Map\n","import React, {\n  useEffect\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\nimport {\n  useHistory,\n  useLocation,\n  Redirect\n} from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport Card from '@material-ui/core/Card'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport GoogleMap from '../../../common/components/GoogleMap/GoogleMap'\n\nimport {\n  countrySelector\n} from '../../../selectors'\n\nimport {\n  getCountryByName,\n  resetCountryByName\n} from '../../../actions'\n\nimport classes from './Country.module.scss'\n\n\nconst Country: React.FC = () => {\n  const { state } = useLocation<any>()\n  const {\n    // error,\n    isLoading,\n    country\n  } = useSelector( countrySelector )\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  useEffect( () => {\n    if ( state && state.name ) {\n      dispatch( getCountryByName( { name: state.name } ) )\n    }\n\n    return () => {\n      dispatch( resetCountryByName() )\n    }\n  }, [] )\n\n  if ( !state ) {\n    return <Redirect to=\"/\" />\n  }\n\n  return (\n    <Grid className=\"hrz-center\" item xs={ 10 }>\n      {\n        !isLoading ? (\n          <Paper className=\"paper\">\n            <Typography variant=\"h4\" color=\"primary\" gutterBottom>\n              { country.name }\n            </Typography>\n            <Card className={ classes['card'] }>\n              <CardHeader title=\"Flag\" />\n              <CardMedia\n                className={ classes['card-media'] }\n                image={ country.flag }\n                title={ country.name }\n              />\n            </Card>\n            <Typography variant=\"body1\" gutterBottom>\n              Capital: { country.capital }\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n              Population: { country.population }\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n              Region: { country.region }\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n              Sub region: { country.subregion }\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n              Phone codes: { country.callingCodes.join( ', ' ) }\n            </Typography>\n            <Typography variant=\"body1\" gutterBottom>\n              Time zones:\n            </Typography>\n            <List>\n              {\n                country.timezones.map( ( tz: string, idx: number ) => (\n                  <ListItem key={ `${country.name}_timezone_${idx}` }>\n                    <ListItemText primary={ tz } />\n                  </ListItem>\n                ) )\n              }\n            </List>\n            <Typography variant=\"body1\" gutterBottom>\n              Languages:\n            </Typography>\n            <List>\n              {\n                country.languages.map( ( language: { name: string }, idx: number ) => (\n                  <ListItem key={ `${country.name}_language_${idx}` }>\n                    <ListItemText primary={ language.name } />\n                  </ListItem>\n                ) )\n              }\n            </List>\n            <Typography variant=\"body1\" gutterBottom>\n              Currencies:\n            </Typography>\n            <List>\n              {\n                country.currencies.map( ( currency: { name: string, symbol: string }, idx: number ) => (\n                  <ListItem key={ `${country.name}_currency_${idx}` }>\n                    <ListItemText\n                      primary={ `${currency.symbol} ( ${currency.name} )` }\n                    />\n                  </ListItem>\n                ) )\n              }\n            </List>\n            <Divider />\n            <Box className=\"txt-center p-8\">\n              <GoogleMap\n                latitude={ country.latlng[0] }\n                longitude={ country.latlng[1] }\n              />\n            </Box>\n            <Button\n              variant=\"outlined\"\n              color=\"primary\"\n              onClick={ () => history.goBack() }\n            >\n              Back\n            </Button>\n          </Paper>\n        ) : <CircularProgress />\n      }\n    </Grid>\n  )\n}\n\nexport default Country\n","import React from 'react'\nimport {\n  Route,\n  Switch\n} from 'react-router-dom'\nimport Grid from '@material-ui/core/Grid'\n\nimport Regions from './components/Regions'\nimport Countries from './components/Countries'\nimport Country from './components/Country'\n\n\nconst Home: React.FC = () => {\n  return (\n    <Grid\n      className=\"container\"\n      container\n      spacing={ 2 }\n      justify=\"center\"\n    >\n      <Switch>\n        <Route exact path=\"/\">\n          <Regions />\n        </Route>\n        <Route path=\"/region\">\n          <Countries />\n        </Route>\n        <Route path=\"/country\">\n          <Country />\n        </Route>\n      </Switch>\n    </Grid>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport StylesProvider from '@material-ui/styles/StylesProvider'\nimport {\n  createMuiTheme,\n  ThemeProvider\n} from '@material-ui/core/styles'\n\nimport lightBlue from '@material-ui/core/colors/lightBlue'\n\nimport { configureStore } from './config/configureStore'\nimport { runSaga } from './config/combineMiddlewares'\n\nimport Header from './common/components/Header'\nimport Home from './home'\n\nimport './styles/base.scss'\n\n\nconst darkTheme = createMuiTheme( {\n  palette: {\n    type: 'dark',\n    primary: lightBlue\n  }\n} )\n\nconst store = configureStore()\nrunSaga()\n\nconst App: React.FC = () => {\n  return (\n    <Router basename=\"/regions\">\n      <Provider store={ store }>\n        <ThemeProvider theme={ darkTheme }>\n          <StylesProvider injectFirst>\n            <CssBaseline />\n            <Header />\n            <Switch>\n              <Route path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </StylesProvider>\n        </ThemeProvider>\n      </Provider>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  createStore,\n  applyMiddleware\n} from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\nimport rootReducer from './combineReducers'\nimport middlewares from './combineMiddlewares'\n\n\nexport function configureStore ( initialState = {} ) {\n  return createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools( applyMiddleware( ...middlewares ) )\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: ( registration: ServiceWorkerRegistration ) => void;\n  onUpdate?: ( registration: ServiceWorkerRegistration ) => void;\n};\n\nexport function register( config?: Config ) {\n  if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if ( publicUrl.origin !== window.location.origin ) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener( 'load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if ( isLocalhost ) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker( swUrl, config )\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then( () => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        } )\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW( swUrl, config )\n      }\n    } )\n  }\n}\n\nfunction registerValidSW( swUrl: string, config?: Config ) {\n  navigator.serviceWorker\n    .register( swUrl )\n    .then( registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if ( installingWorker == null ) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if ( installingWorker.state === 'installed' ) {\n            if ( navigator.serviceWorker.controller ) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if ( config && config.onUpdate ) {\n                config.onUpdate( registration )\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log( 'Content is cached for offline use.' )\n\n              // Execute callback\n              if ( config && config.onSuccess ) {\n                config.onSuccess( registration )\n              }\n            }\n          }\n        }\n      }\n    } )\n    .catch( error => {\n      console.error( 'Error during service worker registration:', error )\n    } )\n}\n\nfunction checkValidServiceWorker( swUrl: string, config?: Config ) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch( swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  } )\n    .then( response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get( 'content-type' )\n      if (\n        response.status === 404 ||\n        ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then( registration => {\n          registration.unregister().then( () => {\n            window.location.reload()\n          } )\n        } )\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW( swUrl, config )\n      }\n    } )\n    .catch( () => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    } )\n}\n\nexport function unregister() {\n  if ( 'serviceWorker' in navigator ) {\n    navigator.serviceWorker.ready\n      .then( registration => {\n        registration.unregister()\n      } )\n      .catch( error => {\n        console.error( error.message )\n      } )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nimport * as serviceWorker from './serviceWorker'\n\nimport './index.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById( 'root' )\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Country_card__15wa-\",\"card-media\":\"Country_card-media__3sFNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"GoogleMap_map__3btQt\"};"],"sourceRoot":""}